project (CMT)
cmake_minimum_required (VERSION 2.6)
if (WIN32)
	set(OPENCV_INCLUDE_DIR_WIN "C:/OpenCV/build/include" CACHE PATH "OpenCV header directory")
	set(OPENCV_LIB_DIR_WIN "C:/OpenCV/build/x86/vc14/lib" CACHE PATH "OpenCV library directory")
	set(OpenCV_SUFFIX "2410" CACHE STRING "OpenCV Suffix")
	set(OpenCV_COMPONENTS calib3d contrib core features2d flann gpu highgui imgproc legacy ml nonfree objdetect ocl photo stitching superres video videostab)
	find_package(OpenCV)
	if(NOT OpenCV_FOUND)
		set(OpenCV_INCLUDE_DIRS "${OPENCV_INCLUDE_DIR_WIN}")
		set(OpenCV_LIBRARY_DIR "${OPENCV_LIB_DIR_WIN}")
		addPrefixAndSuffix("${OpenCV_COMPONENTS}" "${OpenCV_LIBRARY_DIR}/opencv_" "${OpenCV_SUFFIX}.lib" OpenCV_LIBS)
	endif()
else()
	find_package(OpenCV REQUIRED)
endif()

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type" FORCE)
endif()
set(CMT_LIB_NAME cmt CACHE STRING "CMT_LIB_NAME")
set(CMT_SRC src/common.cpp src/Consensus.cpp src/Fusion.cpp src/Matcher.cpp src/Tracker.cpp src/fastcluster/fastcluster.cpp)
if(WIN32)
	# set(CMT_SRC ${CMT_SRC} src/getopt/getopt.cpp)
	add_library (${CMT_LIB_NAME} STATIC ${CMT_SRC})	
	set(CMT_INSTALL_DIR_DEFAULT C:/MTF/lib)
	target_compile_definitions(${CMT_LIB_NAME} PUBLIC _CRT_SECURE_NO_WARNINGS  _SCL_SECURE_NO_WARNINGS)
else()
	add_library (${CMT_LIB_NAME} SHARED ${CMT_SRC})
	set(CMT_INSTALL_DIR_DEFAULT /usr/local/lib)
	add_definitions ("-Wall")
endif()

target_link_libraries(${CMT_LIB_NAME} ${OpenCV_LIBS})
target_include_directories(${CMT_LIB_NAME} PUBLIC include ${OpenCV_INCLUDE_DIRS})

set(CMT_INSTALL_DIR ${CMT_INSTALL_DIR_DEFAULT} CACHE PATH "Directory to install CMT tracker library")
if(WIN32)
	install(TARGETS ${CMT_LIB_NAME} ARCHIVE DESTINATION ${CMT_INSTALL_DIR})
else()
	install(TARGETS ${CMT_LIB_NAME} LIBRARY DESTINATION ${CMT_INSTALL_DIR})
endif() 


# target_compile_options(cmt PUBLIC ${WARNING_FLAGS} ${CT_FLAGS})

# if(WIN32)
# add_library (cmt SHARED src/common.cpp Consensus.cpp Fusion.cpp Matcher.cpp Tracker.cpp
    # fastcluster/fastcluster.cpp getopt/getopt.cpp
    # )
# else()
# add_library (cmt SHARED common.cpp gui.cpp main.cpp
    # Consensus.cpp Fusion.cpp Matcher.cpp Tracker.cpp
    # fastcluster/fastcluster.cpp)
# endif()
# target_link_libraries(cmt ${OpenCV_LIBS})