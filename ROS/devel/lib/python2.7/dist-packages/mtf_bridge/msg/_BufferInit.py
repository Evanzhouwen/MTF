"""autogenerated by genpy from mtf_bridge/BufferInit.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BufferInit(genpy.Message):
  _md5sum = "7e7b7c3b3633bfc4b67478213b87074a"
  _type = "mtf_bridge/BufferInit"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 height
uint32 width
uint32 channels
uint32 buffer_count
uint32 frame_size
uint32 shm_num
uint32 init_id

"""
  __slots__ = ['height','width','channels','buffer_count','frame_size','shm_num','init_id']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       height,width,channels,buffer_count,frame_size,shm_num,init_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BufferInit, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.height is None:
        self.height = 0
      if self.width is None:
        self.width = 0
      if self.channels is None:
        self.channels = 0
      if self.buffer_count is None:
        self.buffer_count = 0
      if self.frame_size is None:
        self.frame_size = 0
      if self.shm_num is None:
        self.shm_num = 0
      if self.init_id is None:
        self.init_id = 0
    else:
      self.height = 0
      self.width = 0
      self.channels = 0
      self.buffer_count = 0
      self.frame_size = 0
      self.shm_num = 0
      self.init_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7I.pack(_x.height, _x.width, _x.channels, _x.buffer_count, _x.frame_size, _x.shm_num, _x.init_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.height, _x.width, _x.channels, _x.buffer_count, _x.frame_size, _x.shm_num, _x.init_id,) = _struct_7I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7I.pack(_x.height, _x.width, _x.channels, _x.buffer_count, _x.frame_size, _x.shm_num, _x.init_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.height, _x.width, _x.channels, _x.buffer_count, _x.frame_size, _x.shm_num, _x.init_id,) = _struct_7I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7I = struct.Struct("<7I")
