// Generated by gencpp from file mtf_bridge/BufferInit.msg
// DO NOT EDIT!


#ifndef MTF_BRIDGE_MESSAGE_BUFFERINIT_H
#define MTF_BRIDGE_MESSAGE_BUFFERINIT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mtf_bridge
{
template <class ContainerAllocator>
struct BufferInit_
{
  typedef BufferInit_<ContainerAllocator> Type;

  BufferInit_()
    : height(0)
    , width(0)
    , channels(0)
    , buffer_count(0)
    , frame_size(0)
    , shm_num(0)
    , init_id(0)  {
    }
  BufferInit_(const ContainerAllocator& _alloc)
    : height(0)
    , width(0)
    , channels(0)
    , buffer_count(0)
    , frame_size(0)
    , shm_num(0)
    , init_id(0)  {
    }



   typedef uint32_t _height_type;
  _height_type height;

   typedef uint32_t _width_type;
  _width_type width;

   typedef uint32_t _channels_type;
  _channels_type channels;

   typedef uint32_t _buffer_count_type;
  _buffer_count_type buffer_count;

   typedef uint32_t _frame_size_type;
  _frame_size_type frame_size;

   typedef uint32_t _shm_num_type;
  _shm_num_type shm_num;

   typedef uint32_t _init_id_type;
  _init_id_type init_id;




  typedef boost::shared_ptr< ::mtf_bridge::BufferInit_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mtf_bridge::BufferInit_<ContainerAllocator> const> ConstPtr;

}; // struct BufferInit_

typedef ::mtf_bridge::BufferInit_<std::allocator<void> > BufferInit;

typedef boost::shared_ptr< ::mtf_bridge::BufferInit > BufferInitPtr;
typedef boost::shared_ptr< ::mtf_bridge::BufferInit const> BufferInitConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mtf_bridge::BufferInit_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mtf_bridge::BufferInit_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mtf_bridge

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'mtf_bridge': ['/home/abhineet/E/UofA/Thesis/Code/TrackingFramework/C++/MTF/ROS/src/mtf_bridge/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mtf_bridge::BufferInit_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mtf_bridge::BufferInit_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mtf_bridge::BufferInit_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mtf_bridge::BufferInit_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mtf_bridge::BufferInit_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mtf_bridge::BufferInit_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mtf_bridge::BufferInit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e7b7c3b3633bfc4b67478213b87074a";
  }

  static const char* value(const ::mtf_bridge::BufferInit_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e7b7c3b3633bfc4ULL;
  static const uint64_t static_value2 = 0xb67478213b87074aULL;
};

template<class ContainerAllocator>
struct DataType< ::mtf_bridge::BufferInit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mtf_bridge/BufferInit";
  }

  static const char* value(const ::mtf_bridge::BufferInit_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mtf_bridge::BufferInit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 height\n\
uint32 width\n\
uint32 channels\n\
uint32 buffer_count\n\
uint32 frame_size\n\
uint32 shm_num\n\
uint32 init_id\n\
";
  }

  static const char* value(const ::mtf_bridge::BufferInit_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mtf_bridge::BufferInit_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.channels);
      stream.next(m.buffer_count);
      stream.next(m.frame_size);
      stream.next(m.shm_num);
      stream.next(m.init_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct BufferInit_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mtf_bridge::BufferInit_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mtf_bridge::BufferInit_<ContainerAllocator>& v)
  {
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "channels: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.channels);
    s << indent << "buffer_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.buffer_count);
    s << indent << "frame_size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frame_size);
    s << indent << "shm_num: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.shm_num);
    s << indent << "init_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.init_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MTF_BRIDGE_MESSAGE_BUFFERINIT_H
