// Generated by gencpp from file mtf_bridge/PatchTrackers.msg
// DO NOT EDIT!


#ifndef MTF_BRIDGE_MESSAGE_PATCHTRACKERS_H
#define MTF_BRIDGE_MESSAGE_PATCHTRACKERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mtf_bridge/Patch.h>

namespace mtf_bridge
{
template <class ContainerAllocator>
struct PatchTrackers_
{
  typedef PatchTrackers_<ContainerAllocator> Type;

  PatchTrackers_()
    : trackers()  {
    }
  PatchTrackers_(const ContainerAllocator& _alloc)
    : trackers(_alloc)  {
    }



   typedef std::vector< ::mtf_bridge::Patch_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mtf_bridge::Patch_<ContainerAllocator> >::other >  _trackers_type;
  _trackers_type trackers;




  typedef boost::shared_ptr< ::mtf_bridge::PatchTrackers_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mtf_bridge::PatchTrackers_<ContainerAllocator> const> ConstPtr;

}; // struct PatchTrackers_

typedef ::mtf_bridge::PatchTrackers_<std::allocator<void> > PatchTrackers;

typedef boost::shared_ptr< ::mtf_bridge::PatchTrackers > PatchTrackersPtr;
typedef boost::shared_ptr< ::mtf_bridge::PatchTrackers const> PatchTrackersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mtf_bridge::PatchTrackers_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mtf_bridge::PatchTrackers_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mtf_bridge

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'mtf_bridge': ['/home/abhineet/E/UofA/Thesis/Code/TrackingFramework/C++/MTF/ROS/src/mtf_bridge/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mtf_bridge::PatchTrackers_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mtf_bridge::PatchTrackers_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mtf_bridge::PatchTrackers_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mtf_bridge::PatchTrackers_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mtf_bridge::PatchTrackers_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mtf_bridge::PatchTrackers_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mtf_bridge::PatchTrackers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b617595ec9fb84f8e093a4f20db41ee";
  }

  static const char* value(const ::mtf_bridge::PatchTrackers_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b617595ec9fb84fULL;
  static const uint64_t static_value2 = 0x8e093a4f20db41eeULL;
};

template<class ContainerAllocator>
struct DataType< ::mtf_bridge::PatchTrackers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mtf_bridge/PatchTrackers";
  }

  static const char* value(const ::mtf_bridge::PatchTrackers_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mtf_bridge::PatchTrackers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Patch[] trackers\n\
\n\
================================================================================\n\
MSG: mtf_bridge/Patch\n\
Point[4] corners\n\
Point center\n\
\n\
================================================================================\n\
MSG: mtf_bridge/Point\n\
float64 x\n\
float64 y\n\
";
  }

  static const char* value(const ::mtf_bridge::PatchTrackers_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mtf_bridge::PatchTrackers_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trackers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct PatchTrackers_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mtf_bridge::PatchTrackers_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mtf_bridge::PatchTrackers_<ContainerAllocator>& v)
  {
    s << indent << "trackers[]" << std::endl;
    for (size_t i = 0; i < v.trackers.size(); ++i)
    {
      s << indent << "  trackers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mtf_bridge::Patch_<ContainerAllocator> >::stream(s, indent + "    ", v.trackers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MTF_BRIDGE_MESSAGE_PATCHTRACKERS_H
